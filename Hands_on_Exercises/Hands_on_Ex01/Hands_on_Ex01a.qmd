---
title: "Hands on Exercise 1a- Geospatial Data Science with R"
author: "Deepika Raja"
date: "August 29, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **1a  Geospatial Data Science with R**

### Built By Deepika Raja

## **1. Getting Started**

## **1.a. Learning Outcome**

**Geospatial Data Science** is a process of [importing, wrangling, integrating, and processing]{.underline} geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

## Installing R Packages

n this hands-on exercise, two R packages will be used. They are:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

Use the code chunk below to load the necessary R packages into R.

```{r}
pacman::p_load(sf, tidyverse)
```

## **1.b Importing Geospatial Data**

### 1.b.2. **Listings.csv from Aspatial folder**:

```{r}
listings <- read_csv("Data/Aspatial/listings.csv")
```

### 1.b.3. **MP14_Subzone shapefile from Geospatial folder**

```{r}
mpsz <- st_read(dsn="data/geospatial",layer ="MP14_SUBZONE_WEB_PL")
```

### 1.b.4. **Cyclingpath shapefile from Geospatial folder**

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

### 1.b.5. **PreSchoolLocation kml from Geospatial folder**

```{r}
preschool <- st_read(dsn = "data/geospatial/PreSchoolsLocation.kml")
```

## 2 **Checking the Content of A Simple Feature Data Frame**

### **2a. st_geometry() -**

Use st_geometry() to extract and inspect the geometry column of the mpsz simple feature data frame.

```{r}
st_geometry(mpsz)
```

### **2b. glimpse() -**

Use glimpse() from the dplyr package to explore the attribute data (non-spatial columns)

```{r}
glimpse(mpsz)
```

### **2c. head() -**

to inspect the first few records in full, including both attributes and geometry.

```{r}
head(mpsz,n=5)
```

## **3. Plotting the Geospatial Data**

### **3a. plot() -**

This gives a quick overview of how each attribute varies spatially.

```{r}
plot(mpsz)
```

### **3b. Plot only the geometry**

focus solely on the spatial layout without attribute overlays.

```{r}
plot(st_geometry(mpsz))
```

### **3c. Plot only the specific attribute -**

plot the geometry colored by a specific attribute.

```{r}
plot(mpsz["PLN_AREA_N"])
```

### **3d. Overlaying Layers:**

Preschool on Top of Subzones To overlay point features (e.g., preschools) on top of polygon features (e.g., subzones).

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool),add = TRUE)
```

Quiz - Note that the preschool point objects failed to plot ontop of the mpsz layer. Do you know why?

***Answer:** The preschool points didn’t appear on the map because they were in a different coordinate system from the mpsz layer. The mpsz data uses Singapore’s local SVY21 system (measured in meters), while the preschool data from the KML file uses a global geographic system (measured in degrees). Since R does not automatically align datasets with different coordinate systems, the preschool points were plotted far away from Singapore, making them invisible. The solution is to transform the preschool data so that it matches the coordinate system of the mpsz layer.*

## **4. Working on Projection in R**

### **4a. Checking the CRS -**

This shows the coordinate reference system (CRS) of the mpsz layer. If the EPSG code is incorrect (e.g., 9001), we need to fix it:

```{r}
st_crs(mpsz)
```

### **4b. Assigning the correct EPSG Code -**

This sets the CRS of mpsz to SVY21 / Singapore TM (EPSG:3414), which uses meters and is suitable for local mapping and confirm the same.

```{r}
mpsz <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz)
```

### **4c. Transforming -**

Transform preschool to match mpsz projections\

```{r}
st_crs(preschool)
```

```{r}
preschool <- st_transform(preschool, crs = 3414)
st_crs(preschool)
```

### **4d. Plot both layers together**

This overlays the preschool points on top of the mpsz map correctly, now that both use the same projection.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), add = TRUE)
```

## **5. Working on Aspatial**

### **5a. Checking the structure of imported data -**

This displays the contents of the listings tibble with columns like latitude, longitude, price, room_type, etc. These coordinates are in decimal degrees, so we assume they use WGS 84 (EPSG:4326).

```{r}
list(listings)
```

### **5b. Convert the tibble into spatial data frame -**

-   Using st_as_sf() turns the tibble into a simple feature (sf) object.

-   coords = c(“longitude”, “latitude”) tells R which columns to use for spatial coordinates.

-   crs = 4326 sets the initial CRS to WGS 84.

-   %\>% st_transform(crs = 3414) reprojects the data to SVY21 / Singapore TM, matching the mpsz layer.

```{r}
listings_sf=st_as_sf(listings, 
                         coords = c("longitude", "latitude"), 
                         crs = 4326) %>%
   st_transform(crs = 3414)
```

### **5c. Inspect the new spatial dataframe**

```{r}
glimpse(listings_sf)
```

### **5d. Plot both layers together - DIY**

Plotting the airbnb listings on the top of mpsz layer. - plot(st_geometry(mpsz)) draws the base map of Singapore subzones. - plot(…, add = TRUE) overlays the Airbnb points. - col = “blue” and pch = 20 make the points visible and styled.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(listings_sf), add = TRUE, col = "blue", pch = 20)
```

## **6. Geoprocessing with sf Package**

### **6a Land Acquisition Analysis**

#### **6a.1. : Create a 5-meter buffer around cycling paths**

-   st_buffer() creates a buffer zone around each line feature.

-   dist = 5 means 5 meters on each side.

-   nQuadSegs = 30 smooths the buffer edges for better visual quality.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

#### **6a.2: Calculate the area of each buffer Base R**

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

#### **6a.3: Calculate total land area required**

```{r}
sum(buffer_cycling$AREA)
```

#### **6a.4: Focus on Tampines West subzone**

```{r}
mpsz_selected <- mpsz %>%
  filter(SUBZONE_N == "TAMPINES WEST")
```

-   filter() extracts only the polygon for Tampines West.

#### **6a.5: Clip buffer to Tampines West using st_intersection()**

```{r}
buffer_cycling <- st_transform(buffer_cycling, st_crs(mpsz_selected))
mpsz_selected <- st_transform(mpsz_selected, st_crs(buffer_cycling))
buffer_cycling_selected <- st_intersection(buffer_cycling, mpsz_selected)
```

-   st_intersection() returns only the overlapping area between the buffer and the selected subzone.

#### **6a.6: Plot the result**

```{r}
plot(st_geometry(mpsz_selected), col = "lightgrey", main = "Buffer Zone in Tampines West")
plot(st_geometry(buffer_cycling_selected), col = "red", add = TRUE)
```

-   This overlays the buffer zone on top of the selected subzone.

### **6b. Count Pre-Schools by Subzone**

#### **6b.1: Count pre-schools within each subzone**

```{r}
mpsz$`PreSch Count` <- lengths(st_intersects(mpsz, preschool))
```

-   st_intersects() checks which points fall inside each polygon.

-   lengths() counts how many pre-schools intersect each subzone.

#### **6b.2: View summary statistics**

```{r}
summary(mpsz$`PreSch Count`)
```

-   This shows min, max, mean, and quartiles of pre-school counts.

#### **6b.3: Find subzone with the most pre-schools**

```{r}
top_n(mpsz, 1, `PreSch Count`)
```

-   top_n() returns the subzone with the highest count.

#### **6b.4: Calculate area of each subzone**

```{r}
mpsz$Area <- st_area(mpsz)
```

-   Adds a new column Area with the size of each subzone in square meters.

#### **6b.5: Compute pre-school density**

```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count` / Area * 1e6)
```

-   Converts count per square meter to count per square kilometer.

#### **6b.6: Visualize Pre-School Density**

A. Histogram using base R

```{r}
hist(mpsz$`PreSch Density`)
```

-   Quick view of distribution, but limited styling.

B. Histogram using ggplot2

```{r}
library(ggplot2)
ggplot(data = mpsz, aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins = 20, color = "black", fill = "light blue") +
  labs(
    title = "Are pre-schools evenly distributed in Singapore?",
    subtitle = "Many subzones have only one pre-school, while seven have 30 or more.",
    x = "Pre-school density (per km²)",
    y = "Frequency"
  )
```

-   A polished histogram with custom labels and colors.

#### **6b.7: Scatterplot of Density vs Count**

```{r}
ggplot(data = mpsz, aes(x = as.numeric(`PreSch Density`), y = `PreSch Count`)) +
  geom_point(color = "black", fill = "light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(
    x = "Pre-school density (per km²)",
    y = "Pre-school count"
  )
```

-   Shows the relationship between density and total count per subzone.
