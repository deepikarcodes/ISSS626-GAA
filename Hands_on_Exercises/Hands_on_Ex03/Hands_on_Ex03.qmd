---
title: "Hands on Exercise 3- Spatio-Temporal Point Patterns Analysis"
author: "Deepika Raja"
date: "September 12, 2025"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## **1. Getting Started**

### **1.a. Learning Outcome**

### **Spatio-Temporal Point Process (STPP)**

-   **Definition**: A random collection of points, each representing both **time** and **location** of an event.

-   **Examples of events**: Disease incidence, species sightings/births, natural disasters (fires, earthquakes, tsunamis, volcanic eruptions, etc.).

### **Why it matters**

-   Growing availability of **geographically and temporally indexed data** makes spatio-temporal analysis increasingly important across multiple fields.

### **Methods & Tools**

-   Numerous **analysis methods** have been developed in the past decade.

-   **R packages** can be combined for guided and intuitive spatio-temporal point pattern analysis.

### **Case Study**

-   Real-world example: **Forest fire events** in Kepulauan Bangka Belitung, Indonesia (Jan–Dec 2023).

-   Demonstrates methods, procedures, and interpretations.

## **2. The data**

For this exercise, two datasets are used:

-   **forestfires (CSV)** – Locations of forest fires detected by the MODIS sensor, sourced from the Fire Information for Resource Management System. Only fires within **Kepulauan Bangka Belitung** are included.

-   **Kepulauan_Bangka_Belitung (Shapefile)** – Sub-district (*kelurahan*) boundaries from the Indonesia Geospatial Portal. Extracted to include only **Kepulauan Bangka Belitung**.

## **3. Installing and Loading R packages**

```{r}
pacman::p_load(sf, spatstat, sparr, 
               tmap, stpp, tidyverse)
```

## **4. Importing & Preparing Study Area**

### **4.a. Importing study area**

```{r}
kbb <- st_read(dsn="data",
               layer = "Kepulauan_Bangka_Belitung") 
```

### **4.b. Cleaning & Preparing the geometry**

```{r}
kbb_sf <- st_read(dsn="data",
               layer = "Kepulauan_Bangka_Belitung") %>%
  st_union() %>%
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 32748)
```

### 4.c. Inspecting the Result:

```{r}
glimpse(kbb_sf)
```

```{r}
plot(kbb_sf)
```

### **4.d. Converting OWIN**

#### 4.d.1. Confirming sf to Owin and inspecting

```{r}
kbb_owin <- as.owin(kbb_sf)
```

```{r}
kbb_owin
```

#### 4.d.2. Confirming the class:

```{r}
class(kbb_owin)
```

## **5. Importing the Preparing Forest Fire Data**

### 5.a. Import CSV and Convert to Spatial Format:

Use read_csv() to load the fire data and convert it to an sf object using longitude and latitude.

```{r}
fire_sf <- read_csv("data/forestfires.csv") %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  st_transform(crs = 32748)  # Reproject to UTM Zone 48S
```

-   This creates a spatial object with fire points in the ideal coordinate system for analysis.

### 5.b. Prepare Temporal Attributes:

Since ppp objects only accept numeric or character marks, you’ll extract and format the date info:

```{r}
fire_sf <- fire_sf %>%
  mutate(
    DayofYear = yday(acq_date),              # Numeric day of year
    Month_num = month(acq_date),             # Numeric month
    Month_fac = month(acq_date,              # Factor month (e.g., "January")
                      label = TRUE, 
                      abbr = FALSE)
  )
```

## **6. Visualising the Fire Points**

### **6.a. Overall Plot**

```{r}
tm_shape(kbb_sf)+
  tm_polygons() +
tm_shape(fire_sf) +
  tm_dots()
```

### **6.b. Visuaising geographic distribution of forest fires by month**

```{r}
tm_shape(kbb_sf)+
  tm_polygons() +
tm_shape(fire_sf) +
  tm_dots(size = 0.1) +
tm_facets(by="Month_fac", 
            free.coords=FALSE, 
            drop.units = TRUE)
```

## **7. Computing STKDE by Month**

In this section, you will learn how to compute STKDE by using [`spattemp.density()`](https://tilmandavies.github.io/sparr/reference/spattemp.density.html) of **sparr** package. Before using the function, it is highly recommended you read the function’s reference guide in detail in order to understand the input data requirements and the output object generated.

### **7.a. Extracting forest fires by month**

The code chunk below is used to remove the unwanted fields from *fire_sf* sf data.frame. This is because `as.ppp()` only need the mark field and geometry field from the input sf data.frame.

```{r}
fire_month <- fire_sf %>%
  select(Month_num)
```

### **7.b. Creating ppp**

```{r}
fire_month_ppp <- as.ppp(fire_month)
fire_month_ppp
```

The code chunk below is used to check the output is in the correct object class:

```{r}
summary(fire_month_ppp)
```

Next, we will check if there are duplicated point events by using the code chunk below:

```{r}
any(duplicated(fire_month_ppp))
```

### **7.c. Including Owin object**

The code chunk below is used to combine *origin_am_ppp* and *am_owin* objects into one.

```{r}
fire_month_owin <- fire_month_ppp[kbb_owin]
summary(fire_month_owin)
```

As a good practice, `plot()` is used to plot *ff_owin* so that we can examine the correctness of the output object.\

```{r}
plot(fire_month_owin)
```

### **7.d. Computing Spatio-temporal KDE**

Next, `spattemp.density()` of sparr package is used to compute the STKDE.

```{r}
st_kde <- spattemp.density(fire_month_owin)
summary(st_kde)
```

### **7.e Plotting the spatio-temporal KDE object**

In the code chunk below, `plot()` of R base is used to the KDE for between July 2023 - December 2023.

```{r}
tims <- c(7,8,9,10,11,12)
par(mfcol=c(2,3))
for(i in tims){ 
  plot(st_kde, i, 
       override.par=FALSE, 
       fix.range=TRUE, 
       main=paste("KDE at month",i))
}
```

## **8. Computing STKDE by Day of Year**

In this section, you will learn how to computer the STKDE of forest fires by day of year.

### **8.a. Creating ppp object**

In the code chunk below, DayofYear field is included in the output ppp object.

```{r}
fire_yday_ppp <- fire_sf %>% 
  select(DayofYear) %>%
  as.ppp()
```

### **8.b. Including Owin object**

Next, code chunk below is used to combine the ppp object and the owin object.

```{r}
fire_yday_owin <- fire_yday_ppp[kbb_owin]
summary(fire_yday_owin)
```

### 8.c

```{r}
kde_yday <- spattemp.density(
  fire_yday_owin)
summary(kde_yday)
```

```{r}
plot(kde_yday)
```

## **9. Computing STKDE by Day of Year: Improved method**

### 9.a.

One of the nice function provides in sparr package is `BOOT.spattemp()`. It support bandwidth selection for standalone spatiotemporal density/intensity based on bootstrap estimation of the MISE, providing an isotropic scalar spatial bandwidth and a scalar temporal bandwidth.

Code chunk below uses `BOOT.spattemp()` to determine both the spatial bandwidth and the scalar temporal bandwidth.

```{r}
set.seed(1234)
BOOT.spattemp(fire_yday_owin) 
```

### **9.b. Computing spatio-temporal KDE**

Now, the STKDE will be derived by using h and lambda values derive in previous step.

```{r}
kde_yday <- spattemp.density(fire_yday_owin,
                             h = 9000,
                             lambda = 19)
summary(kde_yday)
```

### **9.c. Plotting the output spatio-temporal KDE**

Last, `plot()` of **sparr** package is used to plot the output as shown below.

```{r}
plot(kde_yday)
```

## **10. Spatio-temporal Point Patterns Analysis: stpp methods**

In this section, you will gain hands-on experience on using functions of stpp package to perform spatio-temporal point patterns analysis.

Students are encouraged to read [stpp: An R Package for Plotting, Simulating and Analyzing Spatio-Temporal Point Patterns](https://www.jstatsoft.org/article/view/v053i02) to learn more about the package.

### **10.a. Preparing spatio-temporal point process object of stpp**

Step 1: Extracting forest fire coordinates from the fire point events

```{r}
coords <- st_coordinates(fire_sf)
```

Step 2: Creating a data frame by combining the x- and y-coordinates and temporal event. Note that the temporal event must be in integer.

```{r}
fire_df <- data.frame(
  x = coords[, 1],  
  y = coords[, 2],
  t = fire_sf$`DayofYear`)
```

Step 3: Creating stpp spatio-temporal object

In the code chunk below, `as.3dpoint()` of stpp package is used to create stpp spatio-temporal object class.

```{r}
fire_stpp <- as.3dpoints(fire_df)
```

Use the code chunk below to confirm that the output is in stpp spatio-temporal object class:

```{r}
class(fire_stpp)
```

Next we can visual *fire_stpp* by using the code chunk below.

```{r}
plot(fire_stpp)
```

## **11. Computing spatio-temporal k-function**

In the code chunk below, [`STIKhat()`](https://cran.r-project.org/web/packages/stpp/refman/stpp.html#STIKhat) of stpp package is used to compute space-time inhomogeneous K-function.

```{r}
kbb_stik <- STIKhat(fire_stpp)
```

Next, [`plotK()`](https://cran.r-project.org/web/packages/stpp/refman/stpp.html#plotK) is used to visualise the output space-time inhomogeneous K-function.

```{r}
plotK(kbb_stik)
```

## **12. Guide to interpret the plot**

-   If the contours show high values for small values of uu and vv, it suggests clustering at short spatial and temporal distances, meaning events occur close to each other in both space and time.

-   If the contours are flat or show low values, it indicates a more random distribution or a lack of significant clustering at those distances.

The spatial and temporal extent of clustering can be understood by observing how rapidly the contours increase or decrease as we move along the axes. In the plot above, we can see clustering at specific distances by observing the spacing and values of the contour lines.
